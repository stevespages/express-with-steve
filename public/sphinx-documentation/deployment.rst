:doc:`Home </index>`

Deploy Using Github and Heroku
==============================

While building and maintaining a `node-express` app one can use `git` to keep backups of the app in a repository on `Github`. This repo can automatically update the site if it is hosted at `Heroku`.

Clone a Github Repository
-------------------------

If you (or someone else) has a `node-express` app in a Github repository then a copy of it can be cloned onto your computer:

.. code::

   $ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY

Then `cd` into the newly created `YOUR-REPOSITORY` directory and run: ``npm install``. Now the app will work and can be run locally and viewed in a browser.

If the site is edited locally, the edits can be committed using git and then pushed to the repo on Github to update it. The work flow is:

.. code::

   // edit files
   
   git add.

   git commit -m "Say what you did"

   git push origin master

Now the edits that were made will be on `Github` and deployed on `Heroku`.

Deploying This Documentation
----------------------------

Here we will see how this documentation is deployed. It is written using Sphinx. A text editor (I am currently using vim) is used to create an `index.rst` and other `.rst` files. With sphinx installed these files can be converted into html files using the command ``make html``. These html files are generated in a directory called `html`. An express app is created which serves these static files to the browser:

.. code::

   const express = require('express');
   const path = require('path');
   
   // heroku will assign a port env variable
   const PORT = process.env.PORT || 3000;
   
   const app = express()
   
   app.use(express.static(path.join(__dirname, 'public/sphinx-documentation/_build/html')));
   
   app.listen(PORT, () => {
       console.log(`listening on ${PORT}`);
   });

The overall directory structure for the express app that serves the html files generated by Sphinx is:

.. code::

   steve@Dell ~/Desktop/express-with-steve $ tree -I node_modules -L 4
   .
   ├── app.js
   ├── package.json
   ├── package-lock.json
   ├── Procfile
   ├── public
   │   └── sphinx-documentation
   │       ├── _build
   │       │   ├── doctrees
   │       │   └── html
   │       ├── conf.py
   │       ├── heroku.rst
   │       ├── index.rst
   │       ├── make.bat
   │       ├── Makefile
   │       ├── _static
   │       └── _templates
   └── README.md

We can see that we have a directory, `express-with-steve`. This directory is under git version control (it has `.git` and `.gitignore` in it but these and also `node_modules` are not shown in the tree structure above). When `.rst` files are edited and the command ``make html`` is run html files in `public/sphinx-documentation/_build/html` are updated. As can be seen from the `app.js` code this directory is being accessed by `app.js`.

The contents of the `express-with-steve` directory is pushed to www.github.com/stevespages/express-with-steve. An app called `express-with-steve` was created at `heroku` and linked to the github repo referred to above. So, when changes to the sphinx documentation are made and pushed to github they update the heroku website.

From the heroku cli or web dashboard one needs to set up a link to the github page. Also the app needs a Procfile with the instruction to start the app such as `web: node app.js`

Major Changes
-------------

This website was originally created as an ordinary Express app. I then moved the content into a newly created Express Application Generator app. This worked locally but when I pushed the changed app to github the heroku hosted version of the site crashed. Initially I got an H10 Heroku error which turned out to be due to the fact I had not changed the contents of the Procfile. This was `web: node app.js` which was correct for starting an ordinary Express app but not an Express ApplicationGenerator app. I changed the Procfile contents to `web: node bin/www`. Now I was getting an H14 error. This was solved by restarting the dyno using the heroku cli on my computer: `steve@Dell:~$ heroku ps:scale web=1 -a express-with-steve`. Now the app displays in the browser properly when served from Heroku.


